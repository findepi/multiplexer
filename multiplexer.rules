#
# Azouk Libraries -- Libraries and goodies created for www.azouk.com.
# Copyright (C) 2008-2009 Azouk Network Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author:
#      Piotr Findeisen <piotr.findeisen at gmail.com>
#

# vim:ft=conf:

# peer definitions
#
#   PEERS 1 - 99 reserverd for Multiplexer and special types
peer {
    type: 1
    name: "MULTIPLEXER"
    comment: "Peer type representing normal multiplexer instance."
}

peer {
    type: 2
    name: "ALL_TYPES"
    comment: "this is special peer type that causes a message to be sent to all types"
}

peer {
    type: 99
    name: "MAX_MULTIPLEXER_SPECIAL_PEER_TYPE"
    comment: "this only defines a constant"
}

#   PEERS 100-999 are plain peers

# peers 100-105 reserved

peer {
    type: 102
    name: "WEBSITE"
    is_passive: true
    comment: "example peer type showing how to describe a peer which doesn't run MX library main loop for the most of the time"
}

peer {
    type: 106
    name: "PYTHON_TEST_SERVER"
}

peer {
    type: 107
    name: "PYTHON_TEST_CLIENT"
}

peer {
    type: 108
    name: "LOG_STREAMER"
    is_passive: true
}

peer {
    type: 109
    name: "LOG_COLLECTOR"
}

peer {
    type: 110
    name: "EVENTS_COLLECTOR"
}

peer {
    type: 111
    name: "LOG_RECEIVER_EXAMPLE"
}

# peers 112 reserved

# packages and routing rules definitions
#
#   PACKAGES 1 - 99 reserved for Multiplexer meta packages
type {
    type: 1
    name: "PING"
    comment: "I'm alive packet; it never carries any significant message."
}

type {
    type: 2
    name: "CONNECTION_WELCOME"
    comment: "message interchange by peers just after connecting to each other"
}

type {
    type: 3
    name: "BACKEND_FOR_PACKET_SEARCH"
    comment: "message used by MX client in query() for finding a backend that would handle its request"
}

type {
    type: 4
    name: "HEARTBIT"
    comment: "packet to be sent by every peer on every channel when nothing sent through the given channel for certain period of time"
}

type {
    type: 5
    name: "DELIVERY_ERROR"
    comment: "packet could not be delivered to one or more recipients"
}

type {
    type: 99
    name: "MAX_MULTIPLEXER_META_PACKET"
    comment: "this only defines a constant"
}

# PACKAGES 100 - 999 normal package

# types 100-109 reserved

type {
    type: 110
    name: "PYTHON_TEST_REQUEST"
    to {
	peer: "PYTHON_TEST_SERVER"
    }
}

type {
    type: 111
    name: "PYTHON_TEST_RESPONSE"
}

type {
    type: 112
    name: "PICKLE_RESPONSE"
}

type {
    type: 113
    name: "REQUEST_RECEIVED"
    comment: "packet sent by the backend immediatelly after receiving a request and stright to the requesting peer"
}

type {
    type: 114
    name: "BACKEND_ERROR"
    comment: "packet sent by the backend when request handling function finishes and no packet response packet is sent"
}

type {
    type: 115
    name: "LOGS_STREAM"
    comment: "payload is LogEntriesMessage"
    to {
	peer: "LOG_COLLECTOR"
        whom: ALL
    }
    to {
	peer: "LOG_RECEIVER_EXAMPLE"
	whom: ALL
    }
}

type {
    type: 116
    name: "LOGS_STREAM_RESPONSE"
    # currently unused
}

type {
    type: 117
    name: "SEARCH_COLLECTED_LOGS_REQUEST"
    comment: "payload is SearchCollectedLogs; logs are returned in LogEntriesMessage"
    to {
	peer: "LOG_COLLECTOR"
	whom: ANY
    }
}

type {
    type: 118
    name: "SEARCH_COLLECTED_LOGS_RESPONSE"
}

# types 119-125 reserved

type {
    type: 126
    name: "REPLAY_EVENTS_REQUEST"
    comment: "this is a no-response request"
    to {
	peer: "EVENTS_COLLECTOR"
	whom: ANY
    }
}

# types 127-135 reserverd

